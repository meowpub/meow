// Code generated by MockGen. DO NOT EDIT.
// Source: streamitem.go

// Package models is a generated GoMock package.
package models

import (
	snowflake "github.com/bwmarrin/snowflake"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStreamItemStore is a mock of StreamItemStore interface
type MockStreamItemStore struct {
	ctrl     *gomock.Controller
	recorder *MockStreamItemStoreMockRecorder
}

// MockStreamItemStoreMockRecorder is the mock recorder for MockStreamItemStore
type MockStreamItemStoreMockRecorder struct {
	mock *MockStreamItemStore
}

// NewMockStreamItemStore creates a new mock instance
func NewMockStreamItemStore(ctrl *gomock.Controller) *MockStreamItemStore {
	mock := &MockStreamItemStore{ctrl: ctrl}
	mock.recorder = &MockStreamItemStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamItemStore) EXPECT() *MockStreamItemStoreMockRecorder {
	return m.recorder
}

// GetItems mocks base method
func (m *MockStreamItemStore) GetItems(streamID, startID snowflake.ID, direction Direction, count uint) ([]StreamItem, error) {
	ret := m.ctrl.Call(m, "GetItems", streamID, startID, direction, count)
	ret0, _ := ret[0].([]StreamItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems
func (mr *MockStreamItemStoreMockRecorder) GetItems(streamID, startID, direction, count interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockStreamItemStore)(nil).GetItems), streamID, startID, direction, count)
}

// GetItem mocks base method
func (m *MockStreamItemStore) GetItem(itemID snowflake.ID) (*StreamItem, error) {
	ret := m.ctrl.Call(m, "GetItem", itemID)
	ret0, _ := ret[0].(*StreamItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem
func (mr *MockStreamItemStoreMockRecorder) GetItem(itemID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockStreamItemStore)(nil).GetItem), itemID)
}

// GetItemByEntityID mocks base method
func (m *MockStreamItemStore) GetItemByEntityID(streamID, entityID snowflake.ID) (*StreamItem, error) {
	ret := m.ctrl.Call(m, "GetItemByEntityID", streamID, entityID)
	ret0, _ := ret[0].(*StreamItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByEntityID indicates an expected call of GetItemByEntityID
func (mr *MockStreamItemStoreMockRecorder) GetItemByEntityID(streamID, entityID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByEntityID", reflect.TypeOf((*MockStreamItemStore)(nil).GetItemByEntityID), streamID, entityID)
}

// TryInsertItem mocks base method
func (m *MockStreamItemStore) TryInsertItem(stream, entityId snowflake.ID) (*StreamItem, bool, error) {
	ret := m.ctrl.Call(m, "TryInsertItem", stream, entityId)
	ret0, _ := ret[0].(*StreamItem)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TryInsertItem indicates an expected call of TryInsertItem
func (mr *MockStreamItemStoreMockRecorder) TryInsertItem(stream, entityId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryInsertItem", reflect.TypeOf((*MockStreamItemStore)(nil).TryInsertItem), stream, entityId)
}
