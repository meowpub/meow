// Code generated by MockGen. DO NOT EDIT.
// Source: authorization.go

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAuthorizationStore is a mock of AuthorizationStore interface
type MockAuthorizationStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationStoreMockRecorder
}

// MockAuthorizationStoreMockRecorder is the mock recorder for MockAuthorizationStore
type MockAuthorizationStoreMockRecorder struct {
	mock *MockAuthorizationStore
}

// NewMockAuthorizationStore creates a new mock instance
func NewMockAuthorizationStore(ctrl *gomock.Controller) *MockAuthorizationStore {
	mock := &MockAuthorizationStore{ctrl: ctrl}
	mock.recorder = &MockAuthorizationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationStore) EXPECT() *MockAuthorizationStoreMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockAuthorizationStore) Set(code string, auth *Authorization, ttl time.Duration) error {
	ret := m.ctrl.Call(m, "Set", code, auth, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockAuthorizationStoreMockRecorder) Set(code, auth, ttl interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockAuthorizationStore)(nil).Set), code, auth, ttl)
}

// Get mocks base method
func (m *MockAuthorizationStore) Get(code string) (*Authorization, error) {
	ret := m.ctrl.Call(m, "Get", code)
	ret0, _ := ret[0].(*Authorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAuthorizationStoreMockRecorder) Get(code interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthorizationStore)(nil).Get), code)
}

// Delete mocks base method
func (m *MockAuthorizationStore) Delete(code string) error {
	ret := m.ctrl.Call(m, "Delete", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAuthorizationStoreMockRecorder) Delete(code interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthorizationStore)(nil).Delete), code)
}
