// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package models is a generated GoMock package.
package models

import (
	snowflake "github.com/bwmarrin/snowflake"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserStore is a mock of UserStore interface
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// GetBySnowflake mocks base method
func (m *MockUserStore) GetBySnowflake(id snowflake.ID) (*User, error) {
	ret := m.ctrl.Call(m, "GetBySnowflake", id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySnowflake indicates an expected call of GetBySnowflake
func (mr *MockUserStoreMockRecorder) GetBySnowflake(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySnowflake", reflect.TypeOf((*MockUserStore)(nil).GetBySnowflake), id)
}

// GetByEntityID mocks base method
func (m *MockUserStore) GetByEntityID(id snowflake.ID) (*User, error) {
	ret := m.ctrl.Call(m, "GetByEntityID", id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEntityID indicates an expected call of GetByEntityID
func (mr *MockUserStoreMockRecorder) GetByEntityID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEntityID", reflect.TypeOf((*MockUserStore)(nil).GetByEntityID), id)
}

// GetByEmail mocks base method
func (m *MockUserStore) GetByEmail(email string) (*User, error) {
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUserStoreMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserStore)(nil).GetByEmail), email)
}

// Save mocks base method
func (m *MockUserStore) Save(u *User) error {
	ret := m.ctrl.Call(m, "Save", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUserStoreMockRecorder) Save(u interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserStore)(nil).Save), u)
}
